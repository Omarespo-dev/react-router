repo: react-router
--------------------------------PARTE UNO---------------------------------------
Consegna
Creiamo il frontend del nostro Blog e le sue pagine!

    Partiamo installando React Router DOM: npm install react-router-dom
    Definiamo almeno 3 pagine: una homepage, una pagina “chi siamo” e una pagina con la lista dei post
    Implementiamo una navbar in comune a tutte le pagine per poter navigare tra loro 

Bonus

    Centralizzare la Navbar grazie a un Layout
    Gestire la classe active



-------------------PARTE DUE-----------------------------------

Esercizio di oggi: React Blog Pages (2)repo: react-router (stessa di ieri)

Consegna

Completiamo il nostro routing con l’aggiunta delle pagine di dettaglio!

    Aggiungiamo i link alla lista dei post
    Facciamo quindi in modo di raggiungere la pagina di dettaglio del singolo post 

Bonus

    Proviamo a inserire nella pagina di dettaglio una navigazione che ci consenta di andare al post precedente e a quello successivo;
    tutte le cose in più che abbiamo fatto nel LC del mattino.



<!-- Procedimento -->
1) Ho splittato il main dove conteneva il form e la list (splitMain)-- e aggiunto le varie rotte sia su Header che su app.jsx

2) Ora andiamo ad utilizzare i parametri dinamici che ci permetto di andare a vedere i dettagli di quel post ma facendo solo un componente, quindi andiamo A CERCARE per OGNI ID DEL POST. attraverso (VAI AI DETTAGLI )

3) Aggiunto link per vai al dettaglio sulla lista poi aggiunta di una page dei postDetails

4) Poi Andiamo a importare i vari componenti e fare la chiamata VEDERE (PostDetails.jsx)
    ---1️⃣ L'utente visita la pagina → Ad esempio, va su http://localhost:3000/posts/5.
    ---2️⃣ useParams() estrae l'id → In questo caso, id = "5".
    ---3️⃣ axios.get() chiede i dati → Fa una richiesta GET a http://localhost:3000/posts/5.
    ---4️⃣ Il server risponde con i dati del post → Ad esempio:
        {
            "id": 5,
            "title": "Titolo del Post 5",
            "body": "Contenuto del post numero 5"
        }
    ---5️⃣ I dati vengono salvati in useState → setlist(res.data), aggiornando la UI.

5) Setto sia il redirect su app.jsx e error 404 sempre su app.jsx ma creando una page (NotFoundPage) e importandola su app